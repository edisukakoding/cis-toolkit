extends layout

block content 
    .row.mt-4
        .col-xl-6.col-md-6
            .row
                .col-xl-12.col-md-12
                    form#upload-widget.dropzone(method='post' action='/pdf/upload')
                        .fallback
                            input(name='file' type='file')
            .row.mt-3
                .col-xl-12.col-md-12
                    table.table#list-files
                        thead
                            tr
                                th
                                    input.form-check-input.hide(type="checkbox" id="mark-all")
                                th File 
                                th Size 
                                th(style="width: 24%") Halaman
                        tbody
                    hr
            .row.mt-3
                .col-xl-6.col-md-6
                    .mb-3
                        label.form-label(for='namafile') Nama File
                        input#namafile.form-control(type='text' placeholder='PDF-MERGE (tanpa ekstensi)')
                    button.btn.btn-primary(type="button" onclick="tandai(this)") Tandai
                    | &nbsp;
                    button.btn.btn-danger.hide#btn-hapus(type="button" onclick="hapus(this)") Hapus
                    | &nbsp;
                    button.btn.btn-success#btn-proses(type="button") Proses
        .col-xl-6.col-md-6
            .row.h-100
                .row.col-12.pdfviewer.row.h-100
                    .pdftoolbar.text-center.row.m-0.p-0
                        .col-12.col-lg-6.my-1
                            button.btn.btn-secondary.btn-sm.btn-first(onclick='pdfViewer.first()')
                                i.material-icons-outlined skip_previous
                            button.btn.btn-secondary.btn-sm.btn-prev(onclick='pdfViewer.prev(); return false;')
                                i.material-icons-outlined navigate_before
                            span.pageno
                            button.btn.btn-secondary.btn-sm.btn-next(onclick='pdfViewer.next(); return false;')
                                i.material-icons-outlined navigate_next
                            button.btn.btn-secondary.btn-sm.btn-last(onclick='pdfViewer.last()')
                                i.material-icons-outlined skip_next
                        .col-12.col-lg-6.my-1
                            button.btn.btn-secondary.btn-sm(onclick="pdfViewer.setZoom('out')")
                                i.material-icons-outlined zoom_out
                            span.zoomval 100%
                            button.btn.btn-secondary.btn-sm(onclick="pdfViewer.setZoom('in')")
                                i.material-icons-outlined zoom_in
                            button.btn.btn-secondary.btn-sm.ms-3(onclick="pdfViewer.setZoom('width')")
                                i.material-icons-outlined swap_horiz
                            button.btn.btn-secondary.btn-sm(onclick="pdfViewer.setZoom('height')")
                                i.material-icons-outlined swap_vert
                            button.btn.btn-secondary.btn-sm(onclick="pdfViewer.setZoom('fit')")
                                i.material-icons-outlined fit_screen
                    .pdfjs-viewer
    script(type='text/javascript').
        const markAll   = $('#mark-all');
        const namaFile  = $('#namafile');


        let pdfViewer = new PDFjsViewer($('.pdfjs-viewer'), {
            onZoomChange: function (zoom) {
                zoom = parseInt(zoom * 10000) / 100;
                $('.zoomval').text(zoom + '%');
            },
            onActivePageChanged: function (page, pageno) {
                $('.pageno').text(pageno + '/' + this.getPageCount());
            },
        });

        if (getStorage().length) {
            genList(getStorage());
            genThumbnail();
        }

        Dropzone.options.uploadWidget = {
            paramName: 'file',
            maxFilesize: 10, // MB
            dictDefaultMessage: 'Seret file pdf ke sini untuk diunggah, atau klik untuk memilih salah satu',
            acceptedFiles: 'application/pdf',
            init: function () {
                this.on('success', function (file, resp) {
                    let files = [];
                    const storages = getStorage();
                    if ( storages !== null && storages.length) {
                        files = [
                            ...storages,
                            {
                                id: Date.now(),
                                filename: resp.filename,
                                originalname: resp.originalname,
                                size: resp.size,
                                mark: false,
                                pages: ''
                            }
                        ]
                    } else {
                        files = [
                            ...files,
                            {
                                id: Date.now(),
                                filename: resp.filename,
                                originalname: resp.originalname,
                                size: resp.size,
                                mark: false,
                                pages: ''
                            }
                        ];
                    }
                    localStorage.setItem('files', JSON.stringify(files));
                    genList(files);
                });
                this.on('addedfile', function (file) {
                    $(file.previewElement).find(".dz-image img").attr("src", "/pdf.png");
                });
            }
        };

        function genList(files) {
            if (files.length) {
                let html = '';
                files.forEach(function (e) {
                    html += `<tr>
                                <td><input type="checkbox" class="form-check-input hide data-check" data-file="${e.filename}" data-id="${e.id}" onchange="handleMark(this)"/></td>
                                <td onclick="show(this, '${e.filename}')" class="file-name">${e.originalname}</td>
                                <td>${(parseInt(e.size) / 1000000).toFixed(1)} MB</td>
                                <td><input type="text" class="form-control form-control-sm data-halaman" data-id="${e.id}" onchange="handleHalaman(this)" placeholder="Ex: 1,3,5 | 2-5 | 9"/></td>
                            </tr>`;
                });
                $('#list-files > tbody').html(html);
            } else {
                $('#list-files > tbody').html('<tr><td colspan="4" class="text-center">Tidak ada data</td></tr>');
            }
        }

        function tandai(e) {
            if ($('#list-files > tbody > tr > td:first-child > input').hasClass('hide')) {
                $('#list-files > tbody > tr > td:first-child > input').removeClass('hide');
                $(e).text('Batal');
                $($(e).siblings()[1]).removeClass('hide');
                markAll.removeClass('hide');
            } else {
                $('#list-files > tbody > tr > td:first-child > input').addClass('hide');
                $(e).text('Tandai');
                $($(e).siblings()[1]).addClass('hide');
                markAll.addClass('hide');
                $('input[type="checkbox"]').each(function (i, e) {
                    $(e).prop('checked', false);
                });

                setStorage(getStorage().map(d => ({...d, mark: false})));
            }
        }

        function show(el, file) {
            pdfViewer.loadDocument(`pdfs/${file}`).then(function () {
                pdfViewer.setZoom('fit');
            });

            $('#list-files > tbody > tr').each(function (i, e) {
                $(e).removeClass('active');
            });

            $(el).parents('tr').addClass('active');
        }

        function hapus(el) {
            const data = getStorage().filter(d => d.mark === true).map(d => d.filename);

            if(!data.length) {
                return false;
            }

            $.ajax({
                url: '/pdf/delete',
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function (res) {
                    if(!res.status) {
                        alert(res.message);
                        return false;
                    }

                    let storages = getStorage();
                    data.forEach(function (e) {
                        storages = storages.filter(d => d.filename !== e);
                    });
                    setStorage(storages);
                    genList(storages);
                    $(el).addClass('hide');
                    markAll.addClass('hide');
                    $($(el).siblings()[1]).text('Tandai');
                    genThumbnail();
                },
                error: function (err) {
                    console.log(err)
                }
            });
        }

        markAll.on('change', function () {
            const storages = getStorage();

            if($(this).is(':checked')) {
                $('.data-check').each(function (i, e) {
                    $(e).prop('checked', true);
                });

                setStorage(storages.map(d => ({...d, mark: true})));
            }else {
                $('.data-check').each(function (i, e) {
                    $(e).prop('checked', false);
                });

                setStorage(storages.map(d => ({...d, mark: false})));
            }
        });

        function genThumbnail() {
            $('.dz-preview').each(function (i, e) {
                $(e).remove();
            });

            let storages = localStorage.getItem('files');
            if(storages !== null && storages.length) {
                storages = JSON.parse(storages);
                storages.forEach(function (file) {
                    $('#upload-widget').append(`
                        <div class="dz-preview dz-file-preview dz-processing dz-success dz-complete">
                            <div class="dz-image">
                                <img data-dz-thumbnail="" src="/pdf.png" alt="${file.originalname}">
                            </div>
                            <div class="dz-details">
                                <div class="dz-size">
                                    <span data-dz-size="">
                                        <strong>${(file.size / 1000000).toFixed(1)}</strong> MB
                                    </span>
                                </div>
                            <div class="dz-filename">
                                <span data-dz-name="">${file.originalname}</span>
                            </div>
                        </div>
                    `);
                });
            }
        }

        $('#btn-proses').on('click', function () {
            $(this).html(`<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>Loading...`).prop('disabled', true);

            let data  = getStorage();
            const check = data.filter(d => d.mark === true);
            if(check.length) {
                data = check;
            }

            if(!data.length) {
                $('#btn-proses').html('Proses').prop('disabled', false);
                alert('File tidak boleh kosong!')
                return false;
            }

            if(data.length < 2) {
                $('#btn-proses').html('Proses').prop('disabled', false);
                alert('Minimal upload 2 file!');
                return false;
            }

            if(namaFile.val() === '') {
                $('#btn-proses').html('Proses').prop('disabled', false);
                namaFile.addClass('is-invalid');
                alert('Nama File tidak boleh kosong');
                return false;
            }

            $.ajax({
                url: '/pdf/process',
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify({
                    namafile: namaFile.val(),
                    data: data
                }),
                success: function (res) {
                    if(res.status) {
                        $('#btn-proses').html('Proses').prop('disabled', false);
                        window.location.href = '/pdf/download/' + res.message.filename;
                        namaFile.val('');
                        const reload = confirm('Proses berhasil, apakah anda ingin menghapus file sebelumnya?');
                        if(reload) {
                            if(data.length === getStorage().length) {
                                setStorage(getStorage().map(d => ({...d, mark: true})));
                            }
                            $('#btn-hapus').trigger('click');
                        }
                    }else {
                        alert(res.message);
                    }
                },
                error: function (err) {
                    console.log(err)
                }
            });
        });

        function handleHalaman(e) {
            const data = getStorage().map((d) => {
                if ($(e).data('id') === d.id) {
                    return {...d, pages: $(e).val()}
                }

                return d;
            });

            setStorage(data);
        }

        function handleMark(e) {
            const data = getStorage().map((d) => {
                if ($(e).data('id') === d.id) {
                    return {...d, mark: $(e).is(':checked')}
                }

                return d;
            });

            setStorage(data);
        }

        function getStorage() {
            const storages = localStorage.getItem('files');
            if(storages !== null && storages.length) {
                return JSON.parse(storages);
            }

            return [];
        }

        function setStorage(data) {
            localStorage.setItem('files', JSON.stringify(data));
        }